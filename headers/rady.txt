for( auto&& s : a) {
    .... s
---------------------------------------------------------------------------------
inicializace tridy: NE! Trida() { x=0;}
		    ANO Trida() : x(0) {}
		    ANO private: int x {0};


nesmi se kopirovat reference
ok:

class Trida {
public:
  Trida( Y& y) : x_(0), y_(y) { }
private:
  int x_;
  Y& y_;
};
---------------------------------------------------------------------------------
sekv-vector(v pameti souvisle za sebou, pouzivat iterator),array(pole pevne velikosti)
asoc-setr(dle <)-set/multiset,map/multimap
    -nest(hash)-unordered_set/multiset/map/multimap
kon<T>::iterator, const_iterator...lepsi
*it, it->x, +it
auto it...pouzivat co nejvice
begin(),end()
---------------------------------------------------------------------------------
MAPA
#include <map>

map<string,int> m;
m.insert( pair{ "jedna", 1});

auto it = m.find( "jedna");
if( it != m.end())
  *it = ....;

m["dva"] = 2;

cout << it->first << it->second;
---------------------------------------------------------------------------------
Prochazeni vektoru

vector<int> pole;
for( auto i = pole.cbegin(); i != pole.cend(); ++i)
  cout << *i;
vector<int> pole;
for( auto i = pole.cbegin(); i != pole.cend(); ++i)
  cout << *i;

vector<int> pole;
for( auto&& x : pole)
  cout << x;

map<string,int> mapa;
for( auto&& x : mapa)
  cout << x.first << x.second;

front(), back() prvek na zacatku konci
lower_bound, upper_bound

erase(it b, it e)...smazani intervalu
---------------------------------------------------------------------------------
TRIDENI
operator< u trid...jeden, nelze u string int
externí komparátor-fce.... sort(v.begin(), v.end(), mysort);
funktor:

struct T { string s; int i; }; 

struct cmp {
  bool operator()( const T& x, const T& y) const
    { return x.i<y.i  || .....; }
};

set<T, cmp> v;
v.insert( T{"jedna", 1});
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
